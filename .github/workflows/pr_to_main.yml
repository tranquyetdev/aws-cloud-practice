name: PR to Main

on:
  pull_request:
    paths-ignore:
      - '.vscode/**'
      - 'infra/**'
      - '*.md'
    branches:
      - main
jobs:
  setup:
    name: Setup CI/CD
    runs-on: ubuntu-latest
    outputs:
      cloudfrontMatrix: ${{ steps.set-matrix.outputs.cloudfrontMatrix }}
      ecsMatrix: ${{ steps.set-matrix.outputs.ecsMatrix }}
      affectedProjects: ${{ steps.set-matrix.outputs.affectedProjects }}
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0

      # https://github.com/actions/checkout#checkout-pull-request-head-commit-instead-of-merge-commit
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0

      # Install project dependencies
      - name: Install Dependencies
        uses: ./.github/actions/install_deps

      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v6

      # Print out affected projects and set the output for other jobs to use
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v3

      - name: Set NX Affected projects
        id: nx-affected
        run: |
          NX_AFFECTED_BUILD=$(npx nx show projects --with-target build --affected --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }})
          echo "NX_AFFECTED_BUILD<<EOF" >> $GITHUB_OUTPUT
          echo "$NX_AFFECTED_BUILD" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Set matrix
        id: set-matrix
        run: node -r tsm ./tools/ci-cd/prMain.ts
        env:
          CURRENT_BRANCH: ${{ steps.branch-name.outputs.current_branch }}
          GITHUB_PR_NUM: ${{ github.event.number }}
          NX_AFFECTED_BUILD: ${{ steps.nx-affected.outputs.NX_AFFECTED_BUILD }}
        shell: bash

  # CI Tests
  tests:
    name: Tests |> ${{ matrix.target }}
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: ['lint', 'format:check', 'test', 'e2e']
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v3

      - name: Install Dependencies
        uses: ./.github/actions/install_deps

      - name: Tests - ${{ matrix.target }}
        run: |
          if [ '${{ matrix.target }}' = 'test' ]
          then
            npx nx affected -t ${{ matrix.target }} --parallel=3 --ci --coverage
          else
            npx nx affected -t ${{ matrix.target }} --parallel=3
          fi
  build:
    name: Build |> ${{ matrix.project }}
    needs:
      - setup
      - tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJson(needs.setup.outputs.affectedProjects) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Install Dependencies
        uses: ./.github/actions/install_deps

      - name: Build - ${{ matrix.project }}
        run: |
          npx nx run ${{ matrix.project }}:build --parallel=3

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.project }}-build
          path: dist/apps/${{ matrix.project }}

  ecsMatrix:
    name: ECS Matrix |> ${{ matrix.name }}
    runs-on: ubuntu-latest
    needs:
      - build
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.ecsMatrix) }}
    steps:
      - name: Todo
        if: ${{ matrix.run }}
        run: echo "Todo ECS matrix"

  cloudfrontMatrix:
    name: Cloudfront Matrix |> ${{ matrix.name }}
    runs-on: ubuntu-latest
    needs:
      - build
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.cloudfrontMatrix) }}
    steps:
      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.name }}-build

      - name: List files
        run: ls -R

      # - uses: lbertenasco/s3-deploy@v1
      #   with:
      #     folder: dist/apps/${{ matrix.name }}
      #     bucket: ${{ secrets.S3_BUCKET }}
      #     dist-id: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
      #     invalidation: / *

  after:
    name: After CI/CD
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs:
      - setup
      - tests
      - ecsMatrix
      - cloudfrontMatrix
    steps:
      - name: Check pipeline status
        run: |
          echo "setup = ${{ needs.setup.result }}"
          echo "tests = ${{ needs.tests.result }}"
          echo "ecsMatrix = ${{ needs.ecsMatrix.result }}"
          echo "cloudfrontMatrix = ${{ needs.cloudfrontMatrix.result }}"
          if [ "${{ needs.setup.result }}" == "success" ] && \
              [ "${{ needs.ecsMatrix.result }}" == "success" ] && \
              [ "${{ needs.cloudfrontMatrix.result }}" == "success" ] && \
              [ "${{ needs.tests.result }}" == "success" ]
          then
            echo "Pipeline passed! hooray!!"
          else
            echo "Pipeline failed, check the logs on other steps please."
            exit 1
          fi
